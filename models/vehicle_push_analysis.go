// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VehiclePushAnalysis vehicle push analysis
//
// swagger:model VehiclePushAnalysis
type VehiclePushAnalysis struct {

	// a list of all breaks during the trip including the refuel stops
	Breaks []*Break `json:"breaks"`

	// the average consumption during the trip (l/100km)
	// Example: 5.5
	Consumption float32 `json:"consumption,omitempty"`

	// city/location where the trip started
	// Example: Stuttgart
	Departure string `json:"departure,omitempty"`

	// city/location where the trip ended
	// Example: MÃ¼nchen
	Destination string `json:"destination,omitempty"`

	// a list of all refuel stops during the trip
	RefuelStops []*Break `json:"refuelStops"`

	// vehicle identification number
	// Example: WDD1671591Z000999
	Vin string `json:"vin,omitempty"`
}

// Validate validates this vehicle push analysis
func (m *VehiclePushAnalysis) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBreaks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefuelStops(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VehiclePushAnalysis) validateBreaks(formats strfmt.Registry) error {
	if swag.IsZero(m.Breaks) { // not required
		return nil
	}

	for i := 0; i < len(m.Breaks); i++ {
		if swag.IsZero(m.Breaks[i]) { // not required
			continue
		}

		if m.Breaks[i] != nil {
			if err := m.Breaks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("breaks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("breaks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VehiclePushAnalysis) validateRefuelStops(formats strfmt.Registry) error {
	if swag.IsZero(m.RefuelStops) { // not required
		return nil
	}

	for i := 0; i < len(m.RefuelStops); i++ {
		if swag.IsZero(m.RefuelStops[i]) { // not required
			continue
		}

		if m.RefuelStops[i] != nil {
			if err := m.RefuelStops[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("refuelStops" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("refuelStops" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this vehicle push analysis based on the context it is used
func (m *VehiclePushAnalysis) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBreaks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRefuelStops(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VehiclePushAnalysis) contextValidateBreaks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Breaks); i++ {

		if m.Breaks[i] != nil {
			if err := m.Breaks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("breaks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("breaks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VehiclePushAnalysis) contextValidateRefuelStops(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RefuelStops); i++ {

		if m.RefuelStops[i] != nil {
			if err := m.RefuelStops[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("refuelStops" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("refuelStops" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *VehiclePushAnalysis) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VehiclePushAnalysis) UnmarshalBinary(b []byte) error {
	var res VehiclePushAnalysis
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
