// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VehiclePushDataPoint vehicle push data point
//
// swagger:model VehiclePushDataPoint
type VehiclePushDataPoint struct {

	// fuel level for a given time in percent
	// Example: 52
	// Maximum: 100
	// Minimum: 0
	FuelLevel *int32 `json:"fuelLevel,omitempty"`

	// odometer value for a given time
	// Example: 7200
	Odometer int32 `json:"odometer,omitempty"`

	// latitude position for a given time
	// Example: 48.771990
	PositionLat float32 `json:"positionLat,omitempty"`

	// longitude position for a given time
	// Example: 9.172787
	PositionLong float32 `json:"positionLong,omitempty"`

	// unix timestamp
	// Example: 1559137020
	Timestamp int64 `json:"timestamp,omitempty"`
}

// Validate validates this vehicle push data point
func (m *VehiclePushDataPoint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFuelLevel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VehiclePushDataPoint) validateFuelLevel(formats strfmt.Registry) error {
	if swag.IsZero(m.FuelLevel) { // not required
		return nil
	}

	if err := validate.MinimumInt("fuelLevel", "body", int64(*m.FuelLevel), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("fuelLevel", "body", int64(*m.FuelLevel), 100, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this vehicle push data point based on context it is used
func (m *VehiclePushDataPoint) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VehiclePushDataPoint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VehiclePushDataPoint) UnmarshalBinary(b []byte) error {
	var res VehiclePushDataPoint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
